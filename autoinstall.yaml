autoinstall:
  version: 1
  identity:
    hostname: kakaroto-notebook
    username: lvff
    password: "$y$j9T$aPczz0EN.t6qnELbCi.j./$opwfKhHIC9LdvaSAsJwrx8bESxko.Dc6dWIfXK0k6nB"
  locale: en_US.UTF-8
  keyboard:
    layout: br
  timezone: "America/Maceio"  
  storage:
    layout:
      name: lvm
      password: "ENCRYPTION_PASSPHRASE_HERE"
    config:
      - id: disk0
        type: disk
        match:
          size: largest
        ptable: gpt
        wipe: superblock-recursive

      - id: efi
        type: partition
        device: disk0
        size: 250MiB
        flag: boot
        grub_device: true

      - id: pvpart
        type: partition
        device: disk0
        size: -1

      - id: pvcrypt
        type: dm_crypt
        volume: pvpart
        key: "ENCRYPTION_PASSPHRASE_HERE"

      - id: lvm_vg
        type: lvm_vg
        devices: [pvcrypt]
        name: vgubuntu

      - id: lv_root
        type: lvm_lv
        vg: lvm_vg
        name: root
        size: 50GiB
        fstype: ext4
        mountpoint: /

      - id: lv_swap
        type: lvm_lv
        vg: lvm_vg
        name: swap
        size: 70GiB
        fstype: swap

      - id: lv_home
        type: lvm_lv
        vg: lvm_vg
        name: home
        size: -1
        fstype: ext4
        mountpoint: /home
  packages:
    - curl
    - wget
    - build-essential
    - git
    - gh
    - code
    - libreoffice
  snaps:
    - name: docker
      classic: true
  codecs:
      install: true
  drivers:
      install: true
  updates: all
  late-commands:
    # Install nvm
    - curtin in-target --target=/target bash -xc "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash"
    - curtin in-target --target=/target bash -xc "chown -R dev:dev /home/dev/.nvm"
    - curtin in-target --target=/target bash -xc "echo 'export NVM_DIR=\"$HOME/.nvm\"' >> /home/dev/.bashrc"
    - curtin in-target --target=/target bash -xc "echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"' >> /home/dev/.bashrc"
    - curtin in-target --target=/target bash -xc "echo '[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"' >> /home/dev/.bashrc"
    # Install Node 20 using nvm
    - curtin in-target --target=/target su - dev -c "bash -lc 'export NVM_DIR=\"$HOME/.nvm\" && . \"$NVM_DIR/nvm.sh\" && nvm install 20 && nvm alias default 20'"
    # Upgrade npm for Node 20
    - curtin in-target --target=/target su - dev -c "bash -lc 'npm install -g npm@latest'"
    # Install pnpm globally via npm
    - curtin in-target --target=/target su - dev -c "bash -lc 'npm install -g pnpm@latest'"
    # Install Pixi via the official script
    - curtin in-target --target=/target bash -xc "curl -fsSL https://pixi.sh/install.sh | bash"
    # Fix ownership of Pixi in /home/dev/.pixi
    # - curtin in-target --target=/target bash -xc "chown -R lvff:lvff /home/dev/.pixi"
    # Enable Pixi Bash completion
    - curtin in-target --target=/target bash -xc "echo 'eval \"\$(/home/dev/.pixi/bin/pixi completion --shell bash)\"' >> /home/dev/.bashrc"
    # Install global tools via Pixi, including pnpm
    - curtin in-target --target=/target bash -xc "su - dev -c 'export PATH=\$HOME/.pixi/bin:\$PATH && pixi global install python python3'"
    # Install Brave browser
    - curtin in-target --target=/target bash -xc "curl -fsS https://dl.brave.com/install.sh | sh"
    # Install VS Code extensions  
    - curtin in-target --target=/target bash -xc "code --install-extension editorconfig.editorconfig"
